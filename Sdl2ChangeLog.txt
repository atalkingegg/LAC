Version 191121a


I created all of the following Mumble-related global variables:

bool Promoted = false; //@ Handled in GetNetworkApiPacket(). Grants administrative authority to issue Multiplayer Mumble Commands.
char ConvertedMumbleUrl[128]; //@ Passes parameters between ConvertUrlToRealm1() and popen().
char CommsMacro17String1[64] = "ACTIVE-TEAMCAST-CHANNEL";
char CommsMacro18String1[64] = "ACTIVE-MISSIONCAST-CHANNEL";
char CommsMacro19String1[64] = "VOCALIZE-ENEMY-HQ-STATUS";
char Mumble1p2StringActive[128]; //@ Contains a copy of one of the other Mumble1p2 strings in preparation for issuing as the next command
char MumbleStringR0Mission1All[128] =  "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle01/?version=1.2.0";
char MumbleStringR0Mission1Blue[128] = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle01/M1Blue/?version=1.2.0";
char MumbleStringR0Mission1Red[128]  = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle01/M1Red/?version=1.2.0";
char MumbleStringR0Mission2All[128] =  "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle02/?version=1.2.0";
char MumbleStringR0Mission2Blue[128] = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle02/M2Blue/?version=1.2.0";
char MumbleStringR0Mission2Red[128]  = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle02/M2Red/?version=1.2.0";
char MumbleStringR0Mission3All[128] =  "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle03/?version=1.2.0";
char MumbleStringR0Mission3Blue[128] = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle03/M3Blue/?version=1.2.0";
char MumbleStringR0Mission3Red[128]  = "mumble mumble://linuxaircombat.com/LinuxAirCombat/Realm0/MissionNetworkBattle03/M3Red/?version=1.2.0";
char MumbleStringCh01[128] = "mumble mumble://linuxaircombat.com/001/?version=1.2.0";
char MumbleStringCh02[128] = "mumble mumble://linuxaircombat.com/002/?version=1.2.0";
char MumbleStringCh03[128] = "mumble mumble://linuxaircombat.com/003/?version=1.2.0";
char MumbleStringCh04[128] = "mumble mumble://linuxaircombat.com/004/?version=1.2.0";
char MumbleStringCh05[128] = "mumble mumble://linuxaircombat.com/005/?version=1.2.0";
char MumbleStringCh06[128] = "mumble mumble://linuxaircombat.com/006/?version=1.2.0";
char MumbleStringCh07[128] = "mumble mumble://linuxaircombat.com/007/?version=1.2.0";
char MumbleStringCh08[128] = "mumble mumble://linuxaircombat.com/008/?version=1.2.0";
char MumbleStringCh09[128] = "mumble mumble://linuxaircombat.com/009/?&version=1.2.0";
char MumbleStringCh10[128] = "mumble mumble://linuxaircombat.com/010/?&version=1.2.0";
char MumbleStringRoot[128] = "mumble mumble://linuxaircombat.com/?version=1.2.0";
unsigned char RepeatedMorseOutCharCount = 0;    //@ Managed in TransmitCharacterViaMorseRadio().
extern int NetworkMode; (Created in conf.cpp).
Uint32 MumbleCommand1p2Timer = 1000000000;  //@ Interval between Mumble1.2 reset URL and Mumble1.2 Channel change URL commands. Initialize to infinity....
Uint32 MumbleCommandTimer = 11000;          //@ Updated in timergame(). Tested in MumbleChannelChange(). Prevents too rapid flood of Mumble commands
Uint32 MumbleTimeRemainingBeforeChannelReset = 10000000; //@ Counts down. When it reaches zero we try to reset Mumble to proper TeamCast channel.

I created the following function prototypes at the top of main.cpp:

void MumbleChannelChange (char MumbleUrl[]);
void VocalizeEnemyHqStatus();
void event_fireCannon();
void MumbleChannelChange (char MumbleUrl[]);




I copied all of the following functions from Lac07p92 into main.cpp:

void SwitchMumbleToSecretChannel(unsigned char PlayerId)
void ConvertUrlToRealm1(char *MumbleUrl)
void event_CommsMacro01 ()
void event_CommsMacro02 ()
void event_CommsMacro03 ()
void event_CommsMacro04 ()
void event_CommsMacro05 ()
void event_CommsMacro06 ()
void event_CommsMacro07 ()
void event_CommsMacro08 ()
void event_CommsMacro09 ()
void event_CommsMacro10 ()
void event_CommsMacro11 ()
void event_CommsMacro12 ()
void event_CommsMacro13 ()
void event_CommsMacro14 ()
void event_CommsMacro15 ()
void event_CommsMacro16 ()
void event_CommsMacro17 ()
void event_CommsMacro18 ()
void event_CommsMacro19 ()
void Mumble1p2ChannelChange(char MumbleUrl[])
void MumbleChannelChange (char MumbleUrl[])
void TransmitCharacterViaMorseRadio (int key)
void VocalizeEnemyHqStatus()
void WrongChannelMessage()

I copied the following logic from lac07p92 into main.cpp's "TimerGame()" function:

    MumbleCommandTimer += dt; //@ How long since prior Mumble Command was issued?
    MumbleCommand1p2Timer -= dt; //@ How long since prior Mumble Reset Command was issued?
    if (MumbleCommand1p2Timer < 1000)
       { //@ Get here if we've waited at least 1 second since last reset of old-style Mumble client
       display ((char *)"TimerGame() issuing old-style Mumble URL for channel change.", LOG_MOST);
       popen (Mumble1p2StringActive, "r");
       display ((char *)"TimerGame() resetting Mumble1p2Timer to infinity.", LOG_MOST);
       MumbleCommand1p2Timer = 100000000; //@ Reset to infinity
       MumbleCommandTimer = 0; //@ Prevent another Mumble channel change for 10 seconds.
       }

Brief online testing confirms progress: Now LAC can command Mumble to change channels as expected (at least with Mumble V1.3 and later) in response to the user pressing any of the ten keyboard digits "1", "2", "3", "4", "5", "6", "7", "8", "9", and "0". None of the more automatic Mumble channel-changing tools have been tested yet, so users are NOT automatically changed to our standardized channels according to their selected mission.

I updated install.sh to reference the new executable name "LacSdl2-191121A".
I updated Makefile to reference the new executable name "LacSdl2-191121A".
I updated "lac" to prevent it from activating mumble, since LAC now does that for itself.











Version 191122a


I went into conf.cpp and enhanced the prompting text describing this more sophisticated, bit-coded, handling of "NetworkMode". Here is the resulting, enhanced
block of code:


    cf->writeText ((char *)"# NetworkMode. On a network, LAC can operate in either of two distinct modes.");
    cf->writeText ((char *)"# The simplest of these is PeerToPeer mode. In PeerToPeer mode, pairs of");
    cf->writeText ((char *)"# players connect with one another directly, with no need for a network server.");
    cf->writeText ((char *)"# PeerToPeer mode is limited to two-player missions.");
    cf->writeText ((char *)"# ");
    cf->writeText ((char *)"# The other mode is known as ClientServer mode. In ClientServer mode, all players");
    cf->writeText ((char *)"# must connect with a remote LAC Server, and several players can participate in");
    cf->writeText ((char *)"# any multiplayer mission. The number of players in each mission is limited only");
    cf->writeText ((char *)"# by the design of the mission itself and the quality of the network connections");
    cf->writeText ((char *)"# in use. We use the least significant bit of NetworkMode to make this determination.");
    cf->writeText ((char *)"# ");
    cf->writeText ((char *)"# We use the second least significant bit of NetworkMode to tell LAC how to handle");
    cf->writeText ((char *)"# Mumble commands. Old versions of Mumble (prior to V1.3.0), which cannot handle");
    cf->writeText ((char *)"# our Mumble commands, are indicated by setting that bit to 0. If you are using");
    cf->writeText ((char *)"# Mumble V1.3.0 or later, calculate a value of NetworkMode with that bit set to 1.");
    cf->writeText ((char *)"# ");
    cf->writeText ((char *)"# Accordingly, set NetworkMode as follows:");
    cf->writeText ((char *)"# ");
    cf->writeText ((char *)"# For PeerToPeer mode without the latest Mumble, set NetworkMode to 0.");
    cf->writeText ((char *)"# For ClientServer mode without the latest Mumble, set NetworkMode to 1.");
    cf->writeText ((char *)"# For PeerToPeer mode and Mumble V1.3.0 or later, set NetworkMode to 2.");
    cf->writeText ((char *)"# For ClientServer mode and Mumble V1.3.0 or later, set NetworkMode to 3.");
    cf->writeText ((char *)"");
    cf->write     ((char *)" NetworkMode", NetworkMode);


I went into main.cpp's "LacMouseFunc()" function and commented out the following line of diagnostic reporting code in order to improve frame rate in those environments:

   display ((char*)"Function entry: LacMouseFunc()", LOG_MOST);

I fixed the spelling of the Mitsubishi G5M in the menus, changing "G4M" to "G5M" inside main.cpp's "getModelName()" function.

Extensive experience with the pior versios revealed a need to update the player's XZ position with greater influence from his "realspeed" and with correspondingly less influence from his thrust. Accordingly, I went into aiobject.cpp's "DynamicObj::move()" function and began experimentations to re-balance those variables.

In particular, I found it helpful to nullify a divisor associated with "fplayer->realspeed". I changed two lines of code from this:

        accx -= sin(fplayer->phi * DegreesToRadiansFactor) * ((fplayer->realspeed)/5);
        accz -= cos(fplayer->phi * DegreesToRadiansFactor) * ((fplayer->realspeed)/5);


to this:

        accx -= sin(fplayer->phi * DegreesToRadiansFactor) * ((fplayer->realspeed));
        accz -= cos(fplayer->phi * DegreesToRadiansFactor) * ((fplayer->realspeed));

As a consequence of this little change, the apparent speed of travel past terrain objects is greatly accelerated, making the sim much more exciting and more fun to fly (especially down low).

Since that change affected velocity calculations, it was necessary to adjust all of the flight model parameters for all aircraft. They are all initialized in aiobject.pp's large "AIObj::newinit()" function. Accordingly, I copied all of those flight models from the corresponding areas of aiobject.cpp from Lac07R92. During that process I updated all references to the old "DiveSpeedLimitThreshold" to "SeaLevelSpeedLimitThreshold" because the new name is more descriptively accurate.

I also had to adjust the maximum speed at which landing gear can be lowered. To do that, I went into main.cpp's "event_ToggleUndercarriage()" function and changed the relevant condition statement from this:

    if (fplayer->InertiallyDampenedPlayerSpeed < (fplayer->FlapSpeed * 0.75))

to this:

    if (fplayer->InertiallyDampenedPlayerSpeed < (fplayer->FlapSpeed * 0.95))


I also had to go into main.cpp's "TimerGame()" function and make a similar change to adjust automatic retraction of the undercarriage according to the same speed pattern. Here is the changed condition code line:

     if(fplayer->InertiallyDampenedPlayerSpeed > (fplayer->FlapSpeed * 0.95))

Then I had to go into cockpit.cpp's huge "Cockpit::drawCounter()" function and recalibrate the display of "SPEED". I decreased the displayed value by 30%. To make that adjustment, I changed the following line of code:

   sprintf (buf, "SPEED:       %3d", (int) (fplayer->InertiallyDampenedPlayerSpeed / timestep * 50000.0F)); // Was * 54760

to this:

sprintf (buf, "SPEED:       %3d", (int) (fplayer->InertiallyDampenedPlayerSpeed / timestep * 35000.0F)); // Was * 54760


Significant offline and online testing confirms progress: The visual sensation of speed is significantly improved, and jockeying for position while flying in formation is now more realistically affected by realspeed and not just by throttle setting.

I also updated main.cpp's "NetworkApiVersion" from "9" to "10" for compatibility with the contempory setting used by LAC players.











Version 191122b


I fixed a takeoff acceleration bug by inserting the following little block of new code into the area of aiobject.cpp's "CrashGround()" function that handles safe landings:

   //
   // Preload entire SpeedHistoryArray[] when the user tries to take off again, in order
   // to improve takeoff acceleration. Detect this situation by watching for throttle
   // greater than 90%:
   //
   if (fplayer->thrust > 1.0)
      { // Get here whenever the user is still on the ground after landing and asserts high throttle for takeoff
      unsigned char HistoryArrayPointer;
      // Fill every entry of SpeedHistoryArray[] with StallSpeed to help takeoff acceleration
      for (HistoryArrayPointer=0; HistoryArrayPointer<=9; HistoryArrayPointer++)
         {
         SpeedHistoryArray[HistoryArrayPointer] = (fplayer->StallSpeed) * 0.6;
         }
      }

As a result, takeoff acceleration is much improved even if the player has lingered for a long time on the runway, and takeoffs no longer suffer frequent damage at the end of the runway.


I fixed a typographical error in the "MissionHeadToHead00" menus by eliminating a closing parenthesis character from the end of the following line of code, found in main.cpp's "mission_display()" function:

        font1->drawText (xstats / fontscale, -1 / fontscale, -2, (char *)"FOR THIS MISSION, YOUR AIRCRAFT\nIS FULLY ARMED AND FUELED.\n\nIF THERE IS NO ONLINE OPPONENT,\nYOU WILL FLY AGAINST 9 BOTS,\nJUST ONE AT A TIME.", col);











Version 191123a

Version 191123a derives directly from Version 191122b and:

I replaced the entire "mission.cpp"" file with the updated one from Lac07r92.

I copied the "void event_UnMuteMorseAll()" function from version Lac07r92 into main.cpp.

I went into main.cpp and created a new global bool variable named "SkipTargetTourWhileRefueling".

I went into main.cpp's "TimerGame()" function and inserted the following little block of new code to clear "SkipTargetTourWhileRefueling":

    if (!LandedAtSafeSpeed)
       { //@ Get here if we are in the air.
       //@ This is a handy place to reset "SkipTargetTourWhileRefueling"
       //@ in preparation for RearmRefuelRepair() during our next landing
       //@ and refuel cycle:
       SkipTargetTourWhileRefueling = false;
       }

Brief testing confirms improvement of all missions according to the recent advancement from Lac07p92. For example, the automated tactical tour can be stopped during refueling by activating "TargetPrevious".










Version 191125a

Version 191125a was downloaded from github on 25Nov2019 and various githut upload oversights were corrected. After those corrections I confirmed that it compiles and runs correctly, duplicating the functionality of the prior version 191123a.

Players using this version online can successfully fly among players using the production Lac07r92 version of LAC.

However, keyboard mapping is still very cumbersome, and I suspect that some of the prompting text in various menus and configuration files is not as clear or as helpful as in the production version.

The main deficiency of this version is the cumbersome keyboard mapping, due to differences in the way the SDL2 logic decodes keyboard characters versus the method used by SDL1.

While watching run-time diagnostics as keyboard characters are processed, I can see that the values reported by "LacKeyboardFunc()" do not always correspond with values reported by "KeyGame()". LAC has been relying on the "KeyGame()" values, but the SDL2 logic actually duplicates some of the important keystroke values (meaning that different keyboard keys, used by LAC's standard keyboard layout, result in identical KeyGame values). Perhaps I should change LAC so it will rely on the "LacKeyboardFunc()" values instead, since the important ones all seem to be reliably and uniquely decoded under SDL2.





